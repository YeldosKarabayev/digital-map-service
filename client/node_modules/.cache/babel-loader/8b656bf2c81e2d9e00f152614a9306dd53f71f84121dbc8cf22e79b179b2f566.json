{"ast":null,"code":"import{createSelector,createEntityAdapter}from\"@reduxjs/toolkit\";import{apiSlice}from\"../../app/api/apiSlice\";const usersAdapter=createEntityAdapter({});const initialState=usersAdapter.getInitialState();export const usersApiSlice=apiSlice.injectEndpoints({endpoints:builder=>({getUsers:builder.query({query:()=>'/users',validateStatus:(response,result)=>{return response.status===200&&!result.isError;},keepUnusedDataFor:5,transformResponse:responseData=>{const loadedUsers=responseData.map(user=>{user.id=user._id;return user;});return usersAdapter.setAll(initialState,loadedUsers);},providesTags:(result,error,arg)=>{if(result!==null&&result!==void 0&&result.ids){return[{type:'User',id:'LIST'},...result.ids.map(id=>({type:'User',id}))];}else return[{type:'User',id:'LIST'}];}}),addNewUser:builder.mutation({query:initialUserData=>({url:'/users',method:'POST',body:{...initialUserData}}),invalidatesTags:[{type:'User',id:\"LIST\"}]}),updateUser:builder.mutation({query:initialUserData=>({url:'/users',method:'PATCH',body:{...initialUserData}}),invalidatesTags:(result,error,arg)=>[{type:'User',id:arg.id}]}),deleteUser:builder.mutation({query:_ref=>{let{id}=_ref;return{url:\"/users\",method:'DELETE',body:{id}};},invalidatesTags:(result,error,arg)=>[{type:'User',id:arg.id}]})})});export const{useGetUsersQuery,useAddNewUserMutation,useUpdateUserMutation,useDeleteUserMutation}=usersApiSlice;export const selectUsersResult=usersApiSlice.endpoints.getUsers.select();// creates memoized selector\nconst selectUsersData=createSelector(selectUsersResult,usersResult=>usersResult.data// normalized state object with ids & entities\n);//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const{selectAll:selectAllUsers,selectById:selectUserById,selectIds:selectUserIds// Pass in a selector that returns the users slice of state\n}=usersAdapter.getSelectors(state=>{var _selectUsersData;return(_selectUsersData=selectUsersData(state))!==null&&_selectUsersData!==void 0?_selectUsersData:initialState;});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","usersApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","isError","keepUnusedDataFor","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","error","arg","ids","type","addNewUser","mutation","initialUserData","url","method","body","invalidatesTags","updateUser","deleteUser","_ref","useGetUsersQuery","useAddNewUserMutation","useUpdateUserMutation","useDeleteUserMutation","selectUsersResult","select","selectUsersData","usersResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUserIds","getSelectors","state","_selectUsersData"],"sources":["C:/Users/MSI/Desktop/final-map-app/client/client/src/features/users/usersApiSlice.js"],"sourcesContent":["import {\r\n    createSelector,\r\n    createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\nconst usersAdapter = createEntityAdapter({})\r\n\r\nconst initialState = usersAdapter.getInitialState()\r\n\r\nexport const usersApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        getUsers: builder.query({\r\n            query: () => '/users',\r\n            validateStatus: (response, result) => {\r\n                return response.status === 200 && !result.isError\r\n            },\r\n            keepUnusedDataFor: 5,\r\n            transformResponse: responseData => {\r\n                const loadedUsers = responseData.map(user => {\r\n                    user.id = user._id\r\n                    return user\r\n                });\r\n                return usersAdapter.setAll(initialState, loadedUsers)\r\n            },\r\n            providesTags: (result, error, arg) => {\r\n                if (result?.ids) {\r\n                    return [\r\n                        { type: 'User', id: 'LIST' },\r\n                        ...result.ids.map(id => ({ type: 'User', id }))\r\n                    ]\r\n                } else return [{ type: 'User', id: 'LIST' }]\r\n            }\r\n        }),\r\n        addNewUser: builder.mutation({\r\n            query: initialUserData => ({\r\n                url: '/users',\r\n                method: 'POST',\r\n                body: {\r\n                    ...initialUserData,\r\n                }\r\n            }),\r\n            invalidatesTags: [\r\n                { type: 'User', id: \"LIST\" }\r\n            ]\r\n        }),\r\n        updateUser: builder.mutation({\r\n            query: initialUserData => ({\r\n                url: '/users',\r\n                method: 'PATCH',\r\n                body: {\r\n                    ...initialUserData,\r\n                }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'User', id: arg.id }\r\n            ]\r\n        }),\r\n        deleteUser: builder.mutation({\r\n            query: ({ id }) => ({\r\n                url: `/users`,\r\n                method: 'DELETE',\r\n                body: { id }\r\n            }),\r\n            invalidatesTags: (result, error, arg) => [\r\n                { type: 'User', id: arg.id }\r\n            ]\r\n        }),\r\n    }),\r\n})\r\n\r\nexport const {\r\n    useGetUsersQuery,\r\n    useAddNewUserMutation,\r\n    useUpdateUserMutation,\r\n    useDeleteUserMutation,\r\n} = usersApiSlice\r\n\r\n\r\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\r\n\r\n// creates memoized selector\r\nconst selectUsersData = createSelector(\r\n    selectUsersResult,\r\n    usersResult => usersResult.data // normalized state object with ids & entities\r\n)\r\n\r\n//getSelectors creates these selectors and we rename them with aliases using destructuring\r\nexport const {\r\n    selectAll: selectAllUsers,\r\n    selectById: selectUserById,\r\n    selectIds: selectUserIds\r\n    // Pass in a selector that returns the users slice of state\r\n} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}