{"ast":null,"code":"import{createApi,fetchBaseQuery}from'@reduxjs/toolkit/query/react';import{setCredentials}from'../../features/auth/authSlice';const baseQuery=fetchBaseQuery({baseUrl:'http://localhost:3500',credentials:'include',prepareHeaders:(headers,_ref)=>{let{getState}=_ref;const token=getState().auth.token;if(token){headers.set(\"authorization\",\"Bearer \".concat(token));}return headers;}});const baseQueryWithReauth=async(args,api,extraOptions)=>{var _result,_result$error;// console.log(args) // request url, method, body\n// console.log(api) // signal, dispatch, getState()\n// console.log(extraOptions) //custom like {shout: true}\nlet result=await baseQuery(args,api,extraOptions);// If you want, handle other status codes, too\nif(((_result=result)===null||_result===void 0?void 0:(_result$error=_result.error)===null||_result$error===void 0?void 0:_result$error.status)===403){console.log('sending refresh token');// send refresh token to get new access token \nconst refreshResult=await baseQuery('/auth/refresh',api,extraOptions);if(refreshResult!==null&&refreshResult!==void 0&&refreshResult.data){// store the new token \napi.dispatch(setCredentials({...refreshResult.data}));// retry original query with new access token\nresult=await baseQuery(args,api,extraOptions);}else{var _refreshResult$error;if((refreshResult===null||refreshResult===void 0?void 0:(_refreshResult$error=refreshResult.error)===null||_refreshResult$error===void 0?void 0:_refreshResult$error.status)===403){refreshResult.error.data.message=\"Your login has expired. \";}return refreshResult;}}return result;};export const apiSlice=createApi({baseQuery,tagTypes:['User'],endpoints:builder=>({})});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","baseQuery","baseUrl","credentials","prepareHeaders","headers","_ref","getState","token","auth","set","concat","baseQueryWithReauth","args","api","extraOptions","_result","_result$error","result","error","status","console","log","refreshResult","data","dispatch","_refreshResult$error","message","apiSlice","tagTypes","endpoints","builder"],"sources":["C:/Users/MSI/Desktop/final-map-app/client/client/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\nimport { setCredentials } from '../../features/auth/authSlice'\r\n\r\nconst baseQuery = fetchBaseQuery({\r\n    baseUrl: 'http://localhost:3500',\r\n    credentials: 'include',\r\n    prepareHeaders: (headers, { getState }) => {\r\n        const token = getState().auth.token\r\n\r\n        if (token) {\r\n            headers.set(\"authorization\", `Bearer ${token}`)\r\n        }\r\n        return headers\r\n    }\r\n})\r\n\r\n\r\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\r\n    // console.log(args) // request url, method, body\r\n    // console.log(api) // signal, dispatch, getState()\r\n    // console.log(extraOptions) //custom like {shout: true}\r\n\r\n    let result = await baseQuery(args, api, extraOptions)\r\n\r\n    // If you want, handle other status codes, too\r\n    if (result?.error?.status === 403) {\r\n        console.log('sending refresh token')\r\n\r\n        // send refresh token to get new access token \r\n        const refreshResult = await baseQuery('/auth/refresh', api, extraOptions)\r\n\r\n        if (refreshResult?.data) {\r\n\r\n            // store the new token \r\n            api.dispatch(setCredentials({ ...refreshResult.data }))\r\n\r\n            // retry original query with new access token\r\n            result = await baseQuery(args, api, extraOptions)\r\n        } else {\r\n\r\n            if (refreshResult?.error?.status === 403) {\r\n                refreshResult.error.data.message = \"Your login has expired. \"\r\n            }\r\n            return refreshResult\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n\r\nexport const apiSlice = createApi({ \r\n    baseQuery,\r\n    tagTypes: ['User'],\r\n    endpoints: builder =>  ({})\r\n})"],"mappings":"AAAA,OAASA,SAAS,CAAEC,cAAc,KAAQ,8BAA8B,CACxE,OAASC,cAAc,KAAQ,+BAA+B,CAE9D,KAAM,CAAAC,SAAS,CAAGF,cAAc,CAAC,CAC7BG,OAAO,CAAE,uBAAuB,CAChCC,WAAW,CAAE,SAAS,CACtBC,cAAc,CAAEA,CAACC,OAAO,CAAAC,IAAA,GAAmB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC,KAAM,CAAAE,KAAK,CAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK,CAEnC,GAAIA,KAAK,CAAE,CACPH,OAAO,CAACK,GAAG,CAAC,eAAe,WAAAC,MAAA,CAAYH,KAAK,CAAE,CAAC,CACnD,CACA,MAAO,CAAAH,OAAO,CAClB,CACJ,CAAC,CAAC,CAGF,KAAM,CAAAO,mBAAmB,CAAG,KAAAA,CAAOC,IAAI,CAAEC,GAAG,CAAEC,YAAY,GAAK,KAAAC,OAAA,CAAAC,aAAA,CAC3D;AACA;AACA;AAEA,GAAI,CAAAC,MAAM,CAAG,KAAM,CAAAjB,SAAS,CAACY,IAAI,CAAEC,GAAG,CAAEC,YAAY,CAAC,CAErD;AACA,GAAI,EAAAC,OAAA,CAAAE,MAAM,UAAAF,OAAA,kBAAAC,aAAA,CAAND,OAAA,CAAQG,KAAK,UAAAF,aAAA,iBAAbA,aAAA,CAAeG,MAAM,IAAK,GAAG,CAAE,CAC/BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAEpC;AACA,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAtB,SAAS,CAAC,eAAe,CAAEa,GAAG,CAAEC,YAAY,CAAC,CAEzE,GAAIQ,aAAa,SAAbA,aAAa,WAAbA,aAAa,CAAEC,IAAI,CAAE,CAErB;AACAV,GAAG,CAACW,QAAQ,CAACzB,cAAc,CAAC,CAAE,GAAGuB,aAAa,CAACC,IAAK,CAAC,CAAC,CAAC,CAEvD;AACAN,MAAM,CAAG,KAAM,CAAAjB,SAAS,CAACY,IAAI,CAAEC,GAAG,CAAEC,YAAY,CAAC,CACrD,CAAC,IAAM,KAAAW,oBAAA,CAEH,GAAI,CAAAH,aAAa,SAAbA,aAAa,kBAAAG,oBAAA,CAAbH,aAAa,CAAEJ,KAAK,UAAAO,oBAAA,iBAApBA,oBAAA,CAAsBN,MAAM,IAAK,GAAG,CAAE,CACtCG,aAAa,CAACJ,KAAK,CAACK,IAAI,CAACG,OAAO,CAAG,0BAA0B,CACjE,CACA,MAAO,CAAAJ,aAAa,CACxB,CACJ,CAEA,MAAO,CAAAL,MAAM,CACjB,CAAC,CAGD,MAAO,MAAM,CAAAU,QAAQ,CAAG9B,SAAS,CAAC,CAC9BG,SAAS,CACT4B,QAAQ,CAAE,CAAC,MAAM,CAAC,CAClBC,SAAS,CAAEC,OAAO,GAAM,CAAC,CAAC,CAC9B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}